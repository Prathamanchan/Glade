<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Glade Reference Manual</title>
<link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
<!-- #EndEditable -->
<meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
<style type="text/css">
body,td,th {
	font-family: Arial, Helvetica, sans-serif;
}
</style>
</head>
<body bgcolor="#FFFFFF">
<div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
</div>
<div align="left">
  <p align="left"><font face="Arial, Helvetica, sans-serif"><b><font size="4">Glade 
    Reference</font></b></font></p>
  <hr>
  <!-- #BeginEditable "text" --> 
  <h2><font face="Arial, Helvetica, sans-serif">pointListclass</font></h2>
  <p><font face="Arial, Helvetica, sans-serif">A pointListclass represents a list (actually an 
    array) of points.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">pointList*pl = pointlist</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">       
        Creates a pointList.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">pointList*pl = Point(<a href="Point.htm">Point</a> *pts, int num, bool compress =      
     True)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Creates a pointList from the points specified by the array 
<em>pts</em> with size <em>num</em>. If compress is true, the points will be sorted counterclockwise and colinear 
    points removed.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">pointList*pl = Point(int *xpts, int *ypts, int num, bool 
compress =    True)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Creates a pointList from the points specified by the arrays 
x<em>pts and ypts</em>&nbsp;with size <em>num</em>. If compress is true, the 
points will be sorted counterclockwise and colinear 
    points removed.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">operator ==</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns true if the two pointlists 
    are equal.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">operator !=</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns true if the two pointlists 
    are not equal.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">operator &lt;</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns true if one pointList is less than another. 'Less' 
is the case is any&nbsp;vertex X or Y coordinate is 
    less than the other vertex.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.setPtlist(<a href="Point.htm">Point</a> *pts, int 
num, bool compress = True)</strong></font></p>
  <p><font face="Arial">Sets&nbsp;a pointList from the points 
specified by the array <em>pts</em> with size <em>num</em>. If compress is true, 
the points will be sorted counterclockwise and colinear points 
removed.</font></p>
  <p>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.setPtlist(int *xpts, int 
*ypts,&nbsp;int num, bool compress = True)</strong></font></p>
  <p><font face="Arial">Sets a pointList from the points 
specified by the arrays x<em>pts</em> and <em>ypts</em>&nbsp;with size 
<em>num</em>. If compress is true, the points will be sorted counterclockwise 
and colinear points removed.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.setPtlist(<a href="Rect.htm">Rect</a> box)</strong></font></p>
  <p><font face="Arial">Sets a pointList with the 4 vertices of 
a rectangle (LL, LR, UR, UL).</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong><a href="Point.htm">Point</a> *pts = 
pl.points()</strong></font></p>
  <p><font face="Arial">Get the raw pointList as an array of 
Points.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.append(<a href="Point.htm">Point</a> p)</strong></font></p>
  <p><font face="Arial">Append the pointList with Point 
p.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.append(pointList pl)</strong></font></p>
  <p><font face="Arial">Append the pointList with pointList pl.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong><a href="Point.htm">Point</a> p = pl.at(int 
idx)</strong></font></p>
  <p><font face="Arial">Get the Point p given by the index 
idx.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>int num = 
pl.numPts()</strong></font></p>
  <p><font face="Arial">Get the number of points in the 
pointList.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>double a = 
pl.area()</strong></font></p>
  <p><font face="Arial">Gets the area of the pointList. This 
assumes the pointList is closed, i.e. there is an edge between the last and 
first vertex.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>int p = 
pl.perimeter()</strong></font></p>
  <p><font face="Arial">Gets the perimeter of the 
pointList.</font> <font face="Arial">This assumes the pointList is closed, i.e. 
there is an edge between the last and first vertex.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.transform(transform 
trans)</strong></font></p>
  <p><font face="Arial">Transform all points in the pointList by <em>trans</em>.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.scale(double factor, int 
grid)</strong></font></p>
  <p><font face="Arial">Scales all points in a pointList by 
<em>factor</em>, snapping them to a grid <em>grid</em> (in database 
units)</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>pl.compressPoints(bool ortho, 
bool xfirst)</strong></font></p>
  <p><font face="Arial">Compresses all points in a pointList by 
removing all colionear points and ordering them counterclockwise. If ortho is 
true, points are assumed to be manhattan and are stored in a more compressed 
format.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p><font face="Arial" class="shadowHeading1"><strong>bool b = pl.isSelfIntersecting(bool isClosed = 
   true)</strong></font></p>
  <p><font face="Arial">Returns true if the pointList is self 
intersecting.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>bool pl.overlaps(pointListother, touching =  
   false)</strong></font></p>
  <p><font face="Arial">Returns true if one pointList overlaps 
another. If touching is true, returns true if the pointlists touch.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>bool pl.contains(<a href="Point.htm">Point</a> p, bool touching =    
  true)</strong></font></p>
  <p><font face="Arial">Returns true if the pointList contains 
Point <em>p</em>. If <em>touching</em> is true, returns true if Point <em>p</em> 
touches an edge of the pointList.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>bool pl.contains(<a href="Rect.htm">Rect</a> r, bool touching =    
  true)</strong></font></p>
  <p><font face="Arial">Returns true if the pointList contains 
Rect <em>r</em>. If <em>touching</em> is true, returns true if a vertex of 
Rect&nbsp;<em>r</em> touches an edge of the pointList.</font></p>
  <p><font face="Arial"></font>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial"><strong>bool pl.isOrthogonal(bool isClosed =  
  true)</strong></font></p>
  <p><font face="Arial">Returns true if the pointLis tis 
orthogonal i.e. manhattan.</font></p>
  <p><font face="Arial"></font>&nbsp;</p><!-- #EndEditable --> 
  <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
  <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop 
    Design 2018.</font></p>
</div>
</body>
<!-- #EndTemplate --></html>
