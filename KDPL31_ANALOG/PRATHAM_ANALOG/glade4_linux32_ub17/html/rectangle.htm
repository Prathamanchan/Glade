<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><!-- #BeginTemplate "/Templates/glade.dwt" --><!-- DW6 -->
<head>
<!-- #BeginEditable "doctitle" --> 
<title>Glade Reference Manual</title>
<link href="CSS Docs/shadowHeading1.css" rel="stylesheet" type="text/css">
<!-- #EndEditable -->
<meta http-equiv="Content-Type"
 content="text/html; charset=iso-8859-1">
<style type="text/css">
body,td,th {
	font-family: Arial, Helvetica, sans-serif;
}
</style>
</head>
<body bgcolor="#FFFFFF">
<div align="left"><img src="images/canvasview" width="32" height="32" align="right"><br>
</div>
<div align="left">
  <p align="left"><font face="Arial, Helvetica, sans-serif"><b><font size="4">Glade 
    Reference</font></b></font></p>
  <hr>
  <!-- #BeginEditable "text" --> 
  <h2><font face="Arial, Helvetica, sans-serif">rectangle class</font></h2>
  <p><font face="Arial, Helvetica, sans-serif">The rectangle class is derived 
    from a shape. This class is normally created in a cellView using the dbCreateRect() 
    function.</font></p>
  <p>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><strong>int left = r.left()</strong></font></p>
  <p class="shadowHeading1"><strong><font face="Arial, Helvetica, sans-serif">int bottom = r.bottom()</font></strong></p>
  <p class="shadowHeading1"><strong><font face="Arial, Helvetica, sans-serif">int right = r.right()</font></strong></p>
  <p class="shadowHeading1"><strong><font face="Arial, Helvetica, sans-serif">int top = r.top()</font></strong></p>
  <p><font face="Arial, Helvetica, sans-serif">Get the coordinates of the rectangle.</font></p>
  <p>&nbsp;  </p>
  <p class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><strong>r.setLeft(int x)</strong></font></p>
  <p class="shadowHeading1"><strong><font face="Arial, Helvetica, sans-serif">r.setBottom(int y)</font></strong></p>
  <p class="shadowHeading1"><strong><font face="Arial, Helvetica, sans-serif">r.setRight(int x)</font></strong></p>
  <p class="shadowHeading1"><strong><font face="Arial, Helvetica, sans-serif">r.setTop(int y)</font></strong></p>
  <p><font face="Arial, Helvetica, sans-serif">Set the coordinates of the rectangle.</font></p>
  <p>&nbsp;  </p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><a href="Point.htm">Point</a> p = r.origin()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the origin (lower left) of 
    this rectangle.</font>  </p>
  <h4>&nbsp;</h4>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">int w = r.width()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the width of this rectangle.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.width(int w)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Set the width of this rectangle. 
    The origin is maintained.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">int h = r.height()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the height of this rectangle.</font></p>
  <h4>&nbsp;</h4>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.height(int h)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Set the height of this rectangle. 
    The origin is maintained.</font></p>
  <p>&nbsp;</p>
  <p class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><strong><a href="Point.htm">Point</a> p = r.centre()</strong></font></p>
  <p><font face="Arial, Helvetica, sans-serif">Get the centre of a rectangle.</font></p>
  <h4>&nbsp;</h4>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">Rect b = r.bBox()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the bounding box of this rectangle.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.bBox(<a href="Rect.htm">Rect</a> b)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Set the bounding box of this rectangle. 
    This will  change the size of the rectangle</font>.</p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">dbtype_t t = r.objType()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns the object type of this 
    rectangle as RECTANGLE.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">char *name = r.objName()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns the object name of this 
    rectangle as "RECTANGLE".</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">int n = r.nPoints()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns the number of points of 
    the rectangle's boundary as 4.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><a href="Point.htm">Point</a> * pts = r.ptlist()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns the point list of this 
    rectangle as an array of 4 points.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><a href="polygon.htm">polygon</a> p = r.shapeToPoly()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns a polygon with a pointlist 
    identical to this rectangle.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.bias(int bias, double grid)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Bias this rectangle by <i>bias</i>, 
    snapping to the grid <i>grid</i>.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.scale(double scale, double grid)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Scale this rectangle by <i>scale</i>, 
    snapping to the grid <i>grid</i>.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">int d = r.getNearestEdge(<a href="Point.htm">Point</a> p, <a href="segment.htm">segment</a> s)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the distance of the nearest 
    segment <i>s</i> of this rectangle to the point <i>p</i>;</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">int d = r.getNearestVertex(<a href="Point.htm">Point</a> p, <a href="vertex.htm">vertex</a> s)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the distance of the nearest 
    vertex <i>s</i> of this rectangle to the point <i>p</i>;</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">double a = r.area()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the area of this rectangle.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">int p = r.perimeter()</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Get the perimeter of this rectangle.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.transform(<a href="transform.htm">transform</a> 
    trans)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Transform this rectangle using 
    <i>trans</i>.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">bool ptInPoly(<a href="Point.htm">Point</a> p)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Returns True if the point is contained 
    in or on the edge of the rectangle.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.Move(<a href="cellview.htm">cellView</a> *cv, <a href="Point.htm">Point</a> delta, bool opt = True)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Move this rectangle by distance 
    <i>delta</i>.&nbsp; If opt is True then the database is 
re-optimised for the new rectangle position. If there are a lot of objects to 
move it makes sense to turn this off and instead use the cellView update() 
function after moving them all. </font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><a href="dbObj.htm">dbObj</a> *obj = r.Copy(<a href="cellview.htm">cellView</a> cv, 
    <a href="Point.htm">Point</a> delta, int layerNum = -1)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Copy this rectangle to cellView 
    <i>cv</i>, with offset <i>delta</i>. If layerNum is non negative the rectangle 
    will be copied to the new layer number.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif"><a href="dbObj.htm">dbObj</a> *obj = r.Flatten(<a href="cellview.htm">cellView</a> cv, <a href="transform.htm">transform </a>trans)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Flatten this rectangle into cellView 
    <i>cv</i> with transformation <i>trans</i>.</font></p>
  <p>&nbsp;</p>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.Stretch(<a href="Point.htm">Point</a> delta, <a href="segment.htm">segment</a> seg)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Stretch segment <i>seg</i> of this 
    rectangle by <i>delta</i>.</font></p>
  <h4>&nbsp;</h4>
  <h4 class="shadowHeading1"><font face="Arial, Helvetica, sans-serif">r.Stretch(<a href="Point.htm">Point</a> delta, <a href="vertex.htm">vertex</a> v)</font></h4>
  <p><font face="Arial, Helvetica, sans-serif">Stretch vertex <i>v</i> of this 
    rectangle by <i>delta</i>.</font></p>
  <p>&nbsp;</p>
  <p>&nbsp;</p><!-- #EndEditable --> 
  <p><a href="contents.htm"><font face="Arial, Helvetica, sans-serif">Contents</font></a><font face="Arial, Helvetica, sans-serif">|<a href="subject_index.htm">Index</a></font></p>
  <p><font face="Arial, Helvetica, sans-serif" size="-2">Copyright &copy; Peardrop 
    Design 2018.</font></p>
</div>
</body>
<!-- #EndTemplate --></html>
